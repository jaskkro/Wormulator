<!--This Document is generated by GameMaker, if you edit it by hand then you do so at your own risk!-->
<object>
  <spriteName>spr_wormSegment</spriteName>
  <solid>0</solid>
  <visible>-1</visible>
  <depth>-1</depth>
  <persistent>0</persistent>
  <parentName>&lt;undefined&gt;</parentName>
  <maskName>&lt;undefined&gt;</maskName>
  <events>
    <event eventtype="0" enumb="0">
      <action>
        <libid>1</libid>
        <id>603</id>
        <kind>7</kind>
        <userelative>0</userelative>
        <isquestion>0</isquestion>
        <useapplyto>-1</useapplyto>
        <exetype>2</exetype>
        <functionname></functionname>
        <codestring></codestring>
        <whoName>self</whoName>
        <relative>0</relative>
        <isnot>0</isnot>
        <arguments>
          <argument>
            <kind>1</kind>
            <string>passive = true;
readyToLaunch = false;
movingToLaunch = false;
flying = false;
stuckToBird = false;
selected = false;
myBirdNow = noone;
image_speed = .2;
myHealth = 30;
dead = false;

//Movement
destXX = 0;
destYY = 0;
wormSpeed = 3;

//Size tracking
size = choose(1,2,3);
counter = 0;
fullGrown = false;


</string>
          </argument>
        </arguments>
      </action>
    </event>
    <event eventtype="3" enumb="0">
      <action>
        <libid>1</libid>
        <id>603</id>
        <kind>7</kind>
        <userelative>0</userelative>
        <isquestion>0</isquestion>
        <useapplyto>-1</useapplyto>
        <exetype>2</exetype>
        <functionname></functionname>
        <codestring></codestring>
        <whoName>self</whoName>
        <relative>0</relative>
        <isnot>0</isnot>
        <arguments>
          <argument>
            <kind>1</kind>
            <string>///Flying

if (instance_exists(obj_flyArrow) &amp;&amp; mouse_check_button_released(mb_left) &amp;&amp; selected &amp;&amp; !flying) {
    move_towards_point(obj_flyArrow.x, obj_flyArrow.y, random_range(9, 15));
    direction = direction + (random_range(-24,24) * global.accuracy);
    obj_flyArrow.alarm[0] = 1;
    flying = true;
    sprite_index = spr_wormSegment;
}

if (readyToLaunch &amp;&amp; !flying) {
    if (point_distance(mouse_x, mouse_y, x, y) &lt; 16 &amp;&amp; mouse_check_button_released(mb_left)) {
        selected = true;
        sprite_index = spr_wormSelected;
        if (!instance_exists(obj_flyArrow)) {
            with (instance_create(mouse_x, mouse_y, obj_flyArrow)) {
                parent = other.id;
            }
        }
    }
}

if (mouse_check_button_released(mb_right)) {
    selected = false;
    sprite_index = spr_wormSegment;
    with(obj_flyArrow)
        instance_destroy();
}

if (flying = true) {
    if (image_angle &gt; 350) {
        image_angle = 0;
    }
    image_angle += 5;
    speed -= .05;
}

if (flying &amp;&amp; instance_position(x,y, obj_bird) &amp;&amp; !stuckToBird) {
    myBirdNow = instance_nearest(x,y, obj_bird);
    myBirdNow.birdHealth -= size;
    stuckToBird = true;
    audio_play_sound(snd_hitMarker, 10, 0);
    instance_destroy();
}

if (stuckToBird) {
    x = myBirdNow.x;
    y = myBirdNow.y;
    speed = 0;
}
</string>
          </argument>
        </arguments>
      </action>
      <action>
        <libid>1</libid>
        <id>603</id>
        <kind>7</kind>
        <userelative>0</userelative>
        <isquestion>0</isquestion>
        <useapplyto>-1</useapplyto>
        <exetype>2</exetype>
        <functionname></functionname>
        <codestring></codestring>
        <whoName>self</whoName>
        <relative>0</relative>
        <isnot>0</isnot>
        <arguments>
          <argument>
            <kind>1</kind>
            <string>///Crawling

if (destXX = 0 || point_distance(x,y, destXX, destYY) &lt; 10 &amp;&amp; !movingToLaunch &amp;&amp; !readyToLaunch &amp;&amp; !global.war) {
    destXX = random_range(0, room_width - obj_UIbar.sprite_width);
    destXX = destXX - destXX % 4;
    destYY = random_range(512, room_height);
    destYY = destYY - destYY % 4;
    move_towards_point(destXX, destYY, wormSpeed);
    image_angle = direction;
}

if (speed &gt; 0 &amp;&amp; !flying &amp;&amp; !fullGrown) {
    counter += 1;
    if (counter &gt; 90) {
        size += 1;
        counter = 0;
    }
    if (size = 8) {
        fullGrown = true;
    }
    if (fullGrown) {
        rand = random(3);
        if (rand &gt; 2.2) {
            movingToLaunch = true;
            destXX = random_range(0, room_width - obj_UIbar.sprite_width);
            destXX = destXX - destXX % 4;
            destYY = 512;
            move_towards_point(destXX, destYY, wormSpeed);
            image_angle = direction;
        }
        else {
            fullGrown = false;
            size = choose(1,2,3);
            instance_create(x,y, obj_newWorm);
        }
    }
}

if (movingToLaunch &amp;&amp; point_distance(x,y, destXX, destYY) &lt; 6) {
    speed = 0;
    movingToLaunch = false;
    readyToLaunch = true;
}

if (global.war &amp;&amp; !movingToLaunch &amp;&amp; !readyToLaunch) {
    movingToLaunch = true;
    destXX = random_range(0, room_width - obj_UIbar.sprite_width);
    destXX = destXX - destXX % 4;
    destYY = 512;
    move_towards_point(destXX, destYY, wormSpeed);
    image_angle = direction;
}

if (!global.war &amp;&amp; !fullGrown &amp;&amp; (movingToLaunch || readyToLaunch)) {
    movingToLaunch = false;
    readyToLaunch = false;
    destXX = random_range(0, room_width - obj_UIbar.sprite_width);
    destXX = destXX - destXX % 4;
    destYY = random_range(512, room_height);
    destYY = destYY - destYY % 4;
    move_towards_point(destXX, destYY, wormSpeed);
    image_angle = direction;
}

//Eating

if (instance_exists(obj_food))
    nearest = instance_nearest(x,y,obj_food)
else
    nearest = noone;

if (instance_exists(nearest) &amp;&amp; point_distance(x,y, nearest.x, nearest.y) &lt; 32 &amp;&amp; 
    !instance_position(x,y, obj_flood)) {
    with (nearest)
        instance_destroy();
    myHealth += 50;
    size += 5;
    randers = random(4)
    if (randers &gt; 3)
        instance_create(x,y, obj_newWorm);
}

</string>
          </argument>
        </arguments>
      </action>
      <action>
        <libid>1</libid>
        <id>603</id>
        <kind>7</kind>
        <userelative>0</userelative>
        <isquestion>0</isquestion>
        <useapplyto>-1</useapplyto>
        <exetype>2</exetype>
        <functionname></functionname>
        <codestring></codestring>
        <whoName>self</whoName>
        <relative>0</relative>
        <isnot>0</isnot>
        <arguments>
          <argument>
            <kind>1</kind>
            <string>///Getting Flooded

if (instance_position(x,y, obj_flood)) {
    myHealth -= 1 * global.snorkelSkill;
}

if (myHealth &lt; 0) {
    newFood = instance_create(x,y, obj_food);
    newFood.image_angle = image_angle;
    instance_destroy();
}


</string>
          </argument>
        </arguments>
      </action>
    </event>
    <event eventtype="7" enumb="0">
      <action>
        <libid>1</libid>
        <id>603</id>
        <kind>7</kind>
        <userelative>0</userelative>
        <isquestion>0</isquestion>
        <useapplyto>-1</useapplyto>
        <exetype>2</exetype>
        <functionname></functionname>
        <codestring></codestring>
        <whoName>self</whoName>
        <relative>0</relative>
        <isnot>0</isnot>
        <arguments>
          <argument>
            <kind>1</kind>
            <string>if(!stuckToBird) {
    audio_play_sound(snd_wilhelm, 10, 0);
    instance_destroy();
}
</string>
          </argument>
        </arguments>
      </action>
    </event>
  </events>
  <PhysicsObject>0</PhysicsObject>
  <PhysicsObjectSensor>0</PhysicsObjectSensor>
  <PhysicsObjectShape>0</PhysicsObjectShape>
  <PhysicsObjectDensity>0.5</PhysicsObjectDensity>
  <PhysicsObjectRestitution>0.100000001490116</PhysicsObjectRestitution>
  <PhysicsObjectGroup>0</PhysicsObjectGroup>
  <PhysicsObjectLinearDamping>0.100000001490116</PhysicsObjectLinearDamping>
  <PhysicsObjectAngularDamping>0.100000001490116</PhysicsObjectAngularDamping>
  <PhysicsObjectFriction>0</PhysicsObjectFriction>
  <PhysicsObjectAwake>-1</PhysicsObjectAwake>
  <PhysicsObjectKinematic>0</PhysicsObjectKinematic>
  <PhysicsShapePoints/>
</object>
